# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Update Network Rules

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 19 * * *'

jobs:
  update:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create directories
        run: |
          mkdir -p rules/{mosdns,sing-box,json} clang/{ros,ip}

      - name: Cache APT archives
        uses: actions/cache@v4
        id: cache-apt-archives-step
        with:
          path: .cache/apt/archives
          key: ${{ runner.os }}-apt-packages-v2-${{ hashFiles('**/lockfiles') }} # 更具体的key
          restore-keys: |
            ${{ runner.os }}-apt-packages-v2-

      - name: Restore APT archives from cache
        if: steps.cache-apt-archives-step.outputs.cache-hit == 'true'
        run: |
          echo "APT cache hit, restoring from .cache/apt/archives"
          sudo mkdir -p /var/cache/apt/archives
          sudo rsync -avh .cache/apt/archives/ /var/cache/apt/archives/
          # Ensure correct ownership and permissions for apt
          # sudo chown -R _apt:_apt /var/cache/apt/archives || true 
          # sudo find /var/cache/apt/archives -type f -exec chmod 640 {} \;
          # sudo find /var/cache/apt/archives -type d -exec chmod 750 {} \;
          # The above chown/chmod might be too restrictive or incorrect for some setups, 
          # apt itself should handle permissions if files are just placed correctly.
          # Removing lock file if it was cached, and ensuring partial dir exists.
          sudo rm -f /var/cache/apt/archives/lock
          sudo mkdir -p /var/cache/apt/archives/partial

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl wget

      - name: Prepare APT cache for saving
        run: |
          echo "Preparing .cache/apt/archives for saving"
          mkdir -p .cache/apt/archives
          sudo rsync -avh --delete /var/cache/apt/archives/ .cache/apt/archives/
          # Ensure runner has access to created cache directory for the cache action to read
          sudo chown -R $(whoami):$(whoami) .cache

      - name: Install sing-box
        run: |
          set -e
          LATEST_TAG=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases/latest | jq -r .tag_name)
          echo "Latest sing-box tag: $LATEST_TAG"
          wget https://github.com/SagerNet/sing-box/releases/download/${LATEST_TAG}/sing-box-${LATEST_TAG#v}-linux-amd64.tar.gz
          tar -xzf sing-box-*-linux-amd64.tar.gz
          sudo install sing-box-*/sing-box /usr/local/bin
          sing-box version

      - name: Execute china ip update
        run: |
          chmod +x update_china_ip.sh
          ./update_china_ip.sh

      - name: Execute mosdns rules update
        run: |
          chmod +x update_mosdns_rules.sh
          ./update_mosdns_rules.sh

      - name: Commit changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add rules clang
          git commit -m "chore: update rules $(date '+%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"
          git push
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Update Network Rules

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 19 * * *'

jobs:
  update:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      contents: write  # 需要此权限来创建Release和上传文件
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create directories
        run: |
          mkdir -p rules/{mosdns,sing-box,json} clang/{ros,ip}

      - name: Cache APT archives
        uses: actions/cache@v4
        with:
          path: ~/.cache/apt/archives
          key: ${{ runner.os }}-apt-packages-${{ hashFiles('**/update_*.sh') }}
          restore-keys: |
            ${{ runner.os }}-apt-packages-

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl wget

      - name: Install sing-box
        run: |
          set -e
          RELEASE_INFO=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases/latest | jq -r '.assets[] | select(.name | contains("linux-amd64.tar.gz")) | {url: .browser_download_url, name: .name}')
          DOWNLOAD_URL=$(echo "$RELEASE_INFO" | jq -r '.url')
          FILE_NAME=$(echo "$RELEASE_INFO" | jq -r '.name')
          echo "sing-box download URL: $DOWNLOAD_URL"
          echo "sing-box file name: $FILE_NAME"
          wget "$DOWNLOAD_URL"
          tar -xzf "$FILE_NAME"
          EXTRACTED_DIR=$(basename "$FILE_NAME" .tar.gz)
          sudo install "$EXTRACTED_DIR/sing-box" /usr/local/bin
          sing-box version

      - name: Execute china ip update
        run: |
          chmod +x update_china_ip.sh
          if ! ./update_china_ip.sh; then
            echo "错误：中国IP更新脚本执行失败"
            exit 1
          fi

      - name: Execute mosdns rules update
        run: |
          chmod +x update_mosdns_rules.sh
          if ! ./update_mosdns_rules.sh; then
            echo "错误：MosDNS规则更新脚本执行失败"
            exit 1
          fi

      - name: Check for changes
        id: check_changes
        run: |
          if [ -n "$(git status --porcelain rules clang)" ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in rules and clang directories"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          fi

      - name: Create release archive
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          # Create timestamp for release
          TIMESTAMP=$(date '+%Y%m%d-%H%M%S')
          echo "RELEASE_TAG=rules-$TIMESTAMP" >> $GITHUB_ENV
          echo "RELEASE_NAME=Network Rules Update $TIMESTAMP" >> $GITHUB_ENV
          
          # Create archive with updated rules
          tar -czf network-rules-$TIMESTAMP.tar.gz rules/
          echo "ARCHIVE_NAME=network-rules-$TIMESTAMP.tar.gz" >> $GITHUB_ENV
          
          # Generate release notes
          echo "## 📋 更新内容" > release-notes.md
          echo "" >> release-notes.md
          echo "本次更新包含以下文件：" >> release-notes.md
          echo "" >> release-notes.md
          echo "### 🌐 网络规则文件" >> release-notes.md
          echo "- **network-rules-\$TIMESTAMP.tar.gz**: 打包的规则文件（JSON、MosDNS、Sing-Box格式）" >> release-notes.md
          echo "- **clang/ros/**: Mikrotik RouterOS 路由规则文件（.rsc格式）" >> release-notes.md
          echo "- **clang/ip/**: 原始IP地址列表文件（.txt格式）" >> release-notes.md
          echo "" >> release-notes.md
          echo "### 📊 统计信息" >> release-notes.md
          echo "- JSON规则文件数量: $(find rules/json/ -name '*.json' | wc -l)" >> release-notes.md
          echo "- MosDNS规则文件数量: $(find rules/mosdns/ -name '*.txt' | wc -l)" >> release-notes.md
          echo "- Sing-Box规则文件数量: $(find rules/sing-box/ -name '*.srs' | wc -l)" >> release-notes.md
          echo "- RouterOS规则文件数量: $(find clang/ros/ -name '*.rsc' | wc -l)" >> release-notes.md
          echo "- IP地址文件数量: $(find clang/ip/ -name '*.txt' | wc -l)" >> release-notes.md
          echo "" >> release-notes.md
          echo "### ⏰ 更新时间" >> release-notes.md
          echo "$(date '+%Y年%m月%d日 %H:%M:%S UTC')" >> release-notes.md

      - name: Create GitHub Release
        if: steps.check_changes.outputs.changes == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_NAME }}
          body_path: release-notes.md
          files: |
            ${{ env.ARCHIVE_NAME }}
            clang/ros/*.rsc
            clang/ip/*.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean old releases
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          # 获取3天前的时间戳
          CUTOFF_DATE=$(date -d "3 days ago" -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "删除早于 $CUTOFF_DATE 的release"
          
          # 获取所有release并删除超过3天的
          gh release list --limit 100 --json tagName,createdAt,name | \
          jq -r --arg cutoff "$CUTOFF_DATE" \
            '.[] | select(.createdAt < $cutoff) | .tagName' | \
          while read -r tag; do
            if [ ! -z "$tag" ]; then
              echo "删除release: $tag"
              gh release delete "$tag" --yes --cleanup-tag || echo "删除失败: $tag"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
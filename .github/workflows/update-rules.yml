# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Update Network Rules

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 19 * * *'

jobs:
  update:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write  # 需要此权限来创建Release和上传文件
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create directories
        run: |
          mkdir -p rules/{mosdns,sing-box,json} clang/{ros,ip}

      - name: Cache APT archives
        uses: actions/cache@v4
        id: cache-apt-archives-step
        with:
          path: .cache/apt/archives
          key: ${{ runner.os }}-apt-packages-v2-${{ hashFiles('**/package.json', '**/requirements.txt') }}
          # key: ${{ runner.os }}-apt-packages-v2-${{ hashFiles('**/lockfiles') }} # 更具体的key
          restore-keys: |
            ${{ runner.os }}-apt-packages-v2-

      - name: Restore APT archives from cache
        if: steps.cache-apt-archives-step.outputs.cache-hit == 'true'
        run: |
          echo "APT cache hit, restoring from .cache/apt/archives"
          sudo mkdir -p /var/cache/apt/archives
          sudo rsync -avh .cache/apt/archives/ /var/cache/apt/archives/
          # Ensure correct ownership and permissions for apt
          # sudo chown -R _apt:_apt /var/cache/apt/archives || true 
          # sudo find /var/cache/apt/archives -type f -exec chmod 640 {} \;
          # sudo find /var/cache/apt/archives -type d -exec chmod 750 {} \;
          # The above chown/chmod might be too restrictive or incorrect for some setups, 
          # apt itself should handle permissions if files are just placed correctly.
          # Removing lock file if it was cached, and ensuring partial dir exists.
          sudo rm -f /var/cache/apt/archives/lock
          sudo mkdir -p /var/cache/apt/archives/partial

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl wget

      - name: Prepare APT cache for saving
        run: |
          echo "Preparing .cache/apt/archives for saving"
          mkdir -p .cache/apt/archives
          sudo rsync -avh --delete /var/cache/apt/archives/ .cache/apt/archives/
          # Ensure runner has access to created cache directory for the cache action to read
          sudo chown -R $(whoami):$(whoami) .cache

      - name: Install sing-box
        run: |
          set -e
          RELEASE_INFO=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases/latest | jq -r '.assets[] | select(.name | contains("linux-amd64.tar.gz")) | {url: .browser_download_url, name: .name}')
          DOWNLOAD_URL=$(echo "$RELEASE_INFO" | jq -r '.url')
          FILE_NAME=$(echo "$RELEASE_INFO" | jq -r '.name')
          echo "sing-box download URL: $DOWNLOAD_URL"
          echo "sing-box file name: $FILE_NAME"
          wget "$DOWNLOAD_URL"
          tar -xzf "$FILE_NAME"
          EXTRACTED_DIR=$(basename "$FILE_NAME" .tar.gz)
          sudo install "$EXTRACTED_DIR/sing-box" /usr/local/bin
          sing-box version

      - name: Execute china ip update
        run: |
          chmod +x update_china_ip.sh
          ./update_china_ip.sh

      - name: Execute mosdns rules update
        run: |
          chmod +x update_mosdns_rules.sh
          ./update_mosdns_rules.sh

      - name: Check for changes
        id: check_changes
        run: |
          if [ -n "$(git status --porcelain rules clang)" ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in rules and clang directories"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          fi

      - name: Create release archive
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          # Create timestamp for release
          TIMESTAMP=$(date '+%Y%m%d-%H%M%S')
          echo "RELEASE_TAG=rules-$TIMESTAMP" >> $GITHUB_ENV
          echo "RELEASE_NAME=Network Rules Update $TIMESTAMP" >> $GITHUB_ENV
          
          # Create archive with updated rules
          tar -czf network-rules-$TIMESTAMP.tar.gz rules/ clang/
          echo "ARCHIVE_NAME=network-rules-$TIMESTAMP.tar.gz" >> $GITHUB_ENV
          
          # Generate release notes
          echo "## 📋 更新内容" > release-notes.md
          echo "" >> release-notes.md
          echo "本次更新包含以下文件：" >> release-notes.md
          echo "" >> release-notes.md
          echo "### 🌐 网络规则文件" >> release-notes.md
          echo "- **rules/**: 包含各种网络规则配置文件" >> release-notes.md
          echo "- **clang/**: 包含IP地址列表和路由规则" >> release-notes.md
          echo "" >> release-notes.md
          echo "### 📊 统计信息" >> release-notes.md
          echo "- 规则文件数量: $(find rules/ -name '*.json' | wc -l)" >> release-notes.md
          echo "- IP列表文件数量: $(find clang/ip/ -name '*.txt' | wc -l)" >> release-notes.md
          echo "- 路由规则文件数量: $(find clang/ros/ -name '*.rsc' | wc -l)" >> release-notes.md
          echo "" >> release-notes.md
          echo "### ⏰ 更新时间" >> release-notes.md
          echo "$(date '+%Y年%m月%d日 %H:%M:%S UTC')" >> release-notes.md

      - name: Create GitHub Release
        if: steps.check_changes.outputs.changes == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_NAME }}
          body_path: release-notes.md
          files: ${{ env.ARCHIVE_NAME }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}